

var url = require('url');
var querystring = require('querystring');


/**
 * @namespace
 */
var codec = {};


/**
 * @namespace
 */
codec.json = {};


/**
 * @namespace
 */
codec.form = {};


/**
 * @namespace
 */
codec.cookies = {};


/**
 * @namespace
 */
codec.base64 = {};


/**
 * @namespace
 */
codec.url = {};


/**
 * @param {string} string
 * @return {string}
 */
codec.base64.encode = function(string) {
  return (new Buffer(string)).toString(codec.base64.__ENCODING);
};


/**
 * @param {string} string
 * @return {string}
 */
codec.base64.decode = function(string) {
  return (new Buffer(string, codec.base64.__ENCODING)).toString();
};


/**
 * @type {string}
 */
codec.base64.__ENCODING = 'base64';


/**
 * @enum {string}
 */
codec.cookies.AV = {
  'EXPIRES': 'expires',
  'MAX_AGE': 'max-age',
  'DOMAIN': 'domain',
  'PATH': 'path',
  'SECURE': 'secure',
  'HTTP_ONLY': 'httponly'
};



/**
 * @param {string} key
 * @param {string} value
 * @constructor
 */
codec.cookies.Cookie = function(key, value) {

  /**
   * @type {string}
   */
  this.__key = key;

  /**
   * @type {string}
   */
  this.__value = value;

  /**
   * @type {string}
   */
  this.__expires = '';

  /**
   * @type {number}
   */
  this.__maxAge = 0;

  /**
   * @type {string}
   */
  this.__domain = '';

  /**
   * @type {string}
   */
  this.__path = '';

  /**
   * @type {boolean}
   */
  this.__secure = false;

  /**
   * @type {boolean}
   */
  this.__httpOnly = false;

};


/**
 * @return {string}
 */
codec.cookies.Cookie.prototype.getKey = function() {
  return this.__key;
};


/**
 * @return {string}
 */
codec.cookies.Cookie.prototype.getValue = function() {
  return this.__value;
};


/**
 * @return {string}
 */
codec.cookies.Cookie.prototype.getExpires = function() {
  return this.__expires;
};


/**
 * @param {string} expires
 */
codec.cookies.Cookie.prototype.setExpires = function(expires) {
  this.__expires = expires;
};


/**
 * @return {number}
 */
codec.cookies.Cookie.prototype.getMaxAge = function() {
  return this.__maxAge;
};


/**
 * @param {number} maxAge
 */
codec.cookies.Cookie.prototype.setMaxAge = function(maxAge) {
  this.__maxAge = maxAge;
};


/**
 * @return {string}
 */
codec.cookies.Cookie.prototype.getDomain = function() {
  return this.__domain;
};


/**
 * @param {string} domain
 */
codec.cookies.Cookie.prototype.setDomain = function(domain) {
  this.__domain = domain;
};


/**
 * @return {string}
 */
codec.cookies.Cookie.prototype.getPath = function() {
  return this.__path;
};


/**
 * @param {string} path
 */
codec.cookies.Cookie.prototype.setPath = function(path) {
  this.__path = path;
};


/**
 *
 */
codec.cookies.Cookie.prototype.makeSecure = function() {
  this.__secure = true;
};


/**
 *
 */
codec.cookies.Cookie.prototype.makeHttpOnly = function() {
  this.__httpOnly = true;
};


/**
 * @return {string}
 */
codec.cookies.Cookie.prototype.toString = function() {
  var av = [this.__key + '=' + this.__value];

  if (this.__expires) {
    av.push(codec.cookies.AV.EXPIRES + '=' + this.__expires);
  }

  if (this.__maxAge) {
    av.push(codec.cookies.AV.MAX_AGE + '=' + this.__maxAge);
  }

  if (this.__domain) {
    av.push(codec.cookies.AV.DOMAIN + '=' + this.__domain);
  }

  if (this.__path) {
    av.push(codec.cookies.AV.PATH + '=' + this.__path);
  }

  if (this.__secure) {
    av.push(codec.cookies.AV.SECURE);
  }

  if (this.__httpOnly) {
    av.push(codec.cookies.AV.HTTP_ONLY);
  }

  return av.join('; ');
};


/**
 * @param {!codec.cookies.Cookie} cookie
 * @return {string}
 */
codec.cookies.encode = function(cookie) {
  return cookie.toString();
};


/**
 * @param {string} string
 * @return {?codec.cookies.Cookie}
 */
codec.cookies.decode = function(string) {
  var cookie = codec.cookies.__decodeCookie(string);

  if (cookie instanceof codec.cookies.Cookie) {
    cookie.setExpires(
        codec.cookies.__decodeAVValue(string, codec.cookies.AV.EXPIRES));
    cookie.setMaxAge(Number(
        codec.cookies.__decodeAVValue(string, codec.cookies.AV.MAX_AGE)));
    cookie.setDomain(
        codec.cookies.__decodeAVValue(string, codec.cookies.AV.DOMAIN));
    cookie.setPath(
        codec.cookies.__decodeAVValue(string, codec.cookies.AV.PATH));

    if (codec.cookies.__hasAVKey(string, codec.cookies.AV.SECURE)) {
      cookie.makeSecure();
    }

    if (codec.cookies.__hasAVKey(string, codec.cookies.AV.HTTP_ONLY)) {
      cookie.makeHttpOnly();
    }

    return cookie;
  } else {
    return null;
  }
};


/**
 * @type {!Array.<string>}
 */
codec.cookies.__AV_KEYS = [
  codec.cookies.AV.EXPIRES,
  codec.cookies.AV.MAX_AGE,
  codec.cookies.AV.DOMAIN,
  codec.cookies.AV.PATH
];


/**
 * @param {string} cookieString
 * @return {?codec.cookies.Cookie}
 */
codec.cookies.__decodeCookie = function(cookieString) {
  var cookiePairs = cookieString.trim().split(';');
  for (var i = 0; i < cookiePairs.length; i++) {
    var pair = cookiePairs[i].trim().split('=');

    if (pair.length === 2) {
      var key = pair[0].trim();
      var value = pair[1].trim();

      if (codec.cookies.__AV_KEYS.indexOf(key.toLowerCase()) === -1) {
        return new codec.cookies.Cookie(key, value);
      }
    }
  }

  return null;
};


/**
 * @param {string} cookieString
 * @param {string} av
 * @return {string}
 */
codec.cookies.__decodeAVValue = function(cookieString, av) {
  var start = cookieString.toLowerCase().indexOf(av);

  if (start !== -1) {
    var stop = cookieString.indexOf(';', start);
    var end = stop === -1 ? cookieString.length : stop;
    var avPair = cookieString.slice(start, end).trim().split('=');

    return avPair[1] || '';
  } else {
    return '';
  }
};


/**
 * @param {string} cookieString
 * @param {string} av
 * @return {boolean}
 */
codec.cookies.__hasAVKey = function(cookieString, av) {
  return cookieString.toLowerCase().indexOf(av) !== -1;
};


/**
 * @param {!Object} data
 * @return {string}
 */
codec.form.encode = function(data) {
  var result = {};
  var keys = Object.keys(data);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = data[key];

    if (typeof value === 'object') {
      result[key] = codec.json.encode(value);
    } else {
      result[key] = value;
    }
  }

  return querystring.stringify(result);
};


/**
 * @param {string} string
 * @return {?Object}
 */
codec.form.decode = function(string) {
  var result = {};
  var decodedQuery = querystring.parse(string);
  var keys = Object.keys(decodedQuery);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = decodedQuery[key];

    result[key] = typeof value === 'string' ?
        codec.json.decode(value) || value : value;
  }

  return result;
};


/**
 * @param {*} data
 * @return {string}
 */
codec.json.encode = function(data) {
  try {
    return JSON.stringify(data) || '';
  } catch (error) {
    console.warn('WARN: [codec.json.encode] ' +
        '"' + error.message + '" : "' + String(data) + '"');
  }

  return '';
};


/**
 * @param {string} string
 * @return {?Object}
 */
codec.json.decode = function(string) {
  try {
    if (string) {
      var parsedData = JSON.parse(string);
      if (parsedData instanceof Object) {
        return parsedData;
      }
    }

    console.warn('WARN: [codec.json.decode] ' +
        '"Data is not valid" : "' + string + '"');
  } catch (error) {
    console.warn('WARN: [codec.json.decode] ' +
        '"' + String(error.message) + '" : "' + string + '"');
  }

  return null;
};


/**
 * @param {string} urlString
 * @return {!url.URL}
 */
codec.url.decode = function(urlString) {
  var slashesDenoteHost = urlString.length > 2 && urlString.slice(0, 2) == '//';
  return url.parse(urlString, true, slashesDenoteHost);
};


/**
 * @type {!Object}
 */
module.exports = codec;
